---
description: code review
globs: 
alwaysApply: false
---
 
# Code Review Guidelines

When conducting a code review, follow these structured steps to ensure a thorough analysis:

## Step 1: Compare Changes

- Compare the current branch against the target branch (usually `main`)
- Use `git diff --stat main` to get an overview of changed files
- Examine the scope and extent of changes

## Step 2: Review Code Quality

### Architecture and Design
- Evaluate whether the code follows the actor-based architecture
- Check if new components integrate correctly with existing systems
- Assess modularity and separation of concerns
- Verify proper encapsulation of implementation details

### Error Handling
- Ensure all errors are properly handled and propagated
- Check for appropriate use of `Result` and `Option` types
- Verify error messages are descriptive and helpful
- Look for proper error context when errors are converted or wrapped

### Concurrency and Asynchronous Code
- Review proper use of async/await patterns
- Check for potential race conditions or deadlocks
- Verify synchronization mechanisms are appropriate
- Ensure resources are properly managed and released

### Rust-Specific Concerns
- Validate ownership and borrowing rules are respected
- Check for proper use of lifetimes
- Look for unnecessary clones or copies
- Verify correct use of trait implementations
- Check for use of unsafe code and its justification

## Step 3: Test Coverage

- Verify that new code has appropriate test coverage
- Check that both success and error paths are tested
- Look for edge cases that might not be covered
- Assess the quality and maintainability of tests
- Verify that tests are actually testing the behavior, not just the implementation

## Step 4: Performance Considerations

- Identify potential performance issues or inefficiencies
- Look for unnecessary allocations or computations
- Check for proper use of async/await for I/O operations
- Verify appropriate data structures are used

## Step 5: Documentation and Naming

- Check that functions, variables, and types have clear, descriptive names
- Verify that complex logic has explanatory comments
- Ensure public APIs have proper documentation
- Check for consistent naming conventions

## Step 6: Provide Constructive Feedback

- Highlight both strengths and areas for improvement
- Suggest specific solutions for identified issues
- Prioritize feedback by importance (critical, major, minor)
- Frame feedback in a constructive, collaborative manner

## Example Review Output

```
## Code Review Summary

### Architecture and Design
- [Strength] Well-structured actor hierarchy with clear separation of concerns
- [Issue] Actor X has too many responsibilities; consider splitting

### Error Handling
- [Strength] Good use of custom error types with thiserror
- [Issue] Missing error handling in function Y

### Testing
- [Strength] Good test coverage of core functionality
- [Issue] Edge case Z is not tested

### Performance
- [Note] Consider using tokio::sync::oneshot instead of sleep for coordination

### Documentation
- [Strength] Clear module-level documentation
- [Issue] Missing documentation for public function W
```

Always provide specific examples from the code to illustrate points, and suggest concrete improvements where possible. 