---
description: 
globs: 
alwaysApply: true
---
# Human-Centered Documentation Rules

## Core Philosophy

We prioritize human-readable, example-driven documentation by leveraging:

- **mdBook** for structured documentation (`docs/src/`).
- **Standard Rust Tests** (`cargo test`) for validating behavior.
- **Examples** (if present in `examples/`) to showcase usage.

All documentation is written in Markdown under `docs/src/`, ensuring a single source of truth.

---

## **MUST READ FIRST**: Initial Context Acquisition

**At the absolute start of processing any new user request or beginning a new task/milestone, you MUST read the following core documentation files in order. This step is mandatory and precedes any planning or analysis.** This ensures you operate with the fundamental project context.

**Mandatory Initial Reading List:**
1.  `docs/src/SUMMARY.md` (Understand Documentation Structure)
2.  `docs/src/README.md` (Project Overview & Principles)
3.  `docs/src/development/guide.md` (Development Standards)
4.  `docs/src/development/testing_and_linting.md` (Quality & Linting)
5.  The current implementation plan (look in `docs/src/development/implementation-plans/`)

**Do not proceed to planning, analysis, or execution until this initial reading is complete.**

---

## Documentation Structure

```
docs/
├── src/
│   ├── SUMMARY.md               # Table of contents for mdBook
│   ├── README.md                # Project overview & principles
│   ├── features/                # Feature documentation (Markdown)
│   │   └── *.md
│   ├── architecture/            # Architecture documentation (Markdown)
│   │   └── *.md
│   ├── reference/               # API reference & core docs (if applicable)
│   └── development/
│       ├── guide.md             # Development standards
│       ├── testing_and_linting.md # Quality & Lint rules
│       └── implementation-plans/
│           └── *.md             # Drafted implementation plans
├── book/                      # mdBook build output (ignore)
└── examples/                  # Code examples (if applicable)
    └── *.rs
```

---

## Documentation Workflow

For each new task:

1. **Read**
   - `docs/src/SUMMARY.md`
   - `docs/src/README.md`
   - `docs/src/development/guide.md`
   - `docs/src/development/testing_and_linting.md`
   - Task-specific documentation in `docs/src/` (e.g., `features/`, `architecture/`)
   - Relevant examples in `examples/` (if applicable)

2. **Experiment**
   - Run relevant Rust tests (`cargo test`) to understand current behavior.
   - Execute example code (if applicable).

3. **Analyze**
   - Compare expected behavior (from docs/requirements) against test results and implementation.
   - Identify gaps or outdated content in documentation.

4. **Plan**
   - Draft an implementation plan in
     `docs/src/development/implementation-plans/<task-name>.md`

5. **Document**
   - Update or add Markdown in `docs/src/`.
   - Update or add Rust tests (`#[test]`, integration tests).
   - Update or create examples in `examples/` (if applicable).
   - Amend `docs/src/SUMMARY.md` if structure changes.

---

## Standard Workflow (After Initial Read)

Once the initial context is established by reading the mandatory files:

1.  **Read Task-Specific Docs (If Applicable):**
    *   Relevant `docs/src/**/*.md`
    *   Relevant `examples/*.rs`
    *   Existing `docs/src/development/implementation-plans/<task-name>.md`
2.  **Experiment:** Run relevant `cargo test`, execute examples.
3.  **Analyze:** Compare requirements, docs, tests, and implementation. Identify gaps.
4.  **Plan (PLAN Mode):** Draft or update the implementation plan in `docs/src/development/implementation-plans/`.
5.  **Document & Implement (ACT Mode):** Update code, tests, examples, and documentation (`docs/src/`, `SUMMARY.md`).

---

## Update Triggers

- **`update docs`** — Review recent implementations and update the documentation to match.
- **`new plan`** — Scaffold a new implementation plan template.

---

## File Reading Priority

1. `docs/src/SUMMARY.md`
2. `docs/src/README.md`
3. `docs/src/development/guide.md`
4. `docs/src/development/testing_and_linting.md`
5. Task-specific documentation in `docs/src/` (e.g., features, architecture)
6. `examples/` (if applicable)
7. `docs/src/reference/` (if applicable)

---

## Making Documentation Updates

1. Identify the Markdown file(s) in `docs/src/` to update.
2. Note why the update is needed.
3. Show proposed changes in Markdown format.
4. Update `docs/src/SUMMARY.md` if pages are added/removed.
5. Commit changes after review.

---

## Knowledge Tracking

1. Create a dedicated branch for docs updates.
2. Edit or add files in `docs/src/` and potentially `examples/`.
3. Run `cargo test` to verify changes don't break tests.
4. Build the docs (`cd docs && mdbook build`) to check for errors.
5. Open a PR with updated docs, tests, and examples.
