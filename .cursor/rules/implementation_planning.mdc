---
description: Creating implementation plans
globs: 
alwaysApply: false
---
# Implementation Planning Guidelines

## Feature-First, Incremental Approach

When planning new features or modules in Quilt, follow these guidelines to create effective, incremental implementation plans.

### Core Principles

1. **Start Small and Iterate** - Begin with the simplest working version and build on it
2. **Focus on End-User Features** - Organize by user-visible capabilities, not technical layers
3. **Learn as You Go** - Design each step to provide learnings that inform the next steps
4. **Always Have Something Working** - Each milestone should produce testable functionality

### Implementation Plan Structure

#### 1. Use Milestone-Based Structure

```markdown
## Milestone 1: [Short Feature Name]

**Goal:** [One-sentence description of the user-visible feature]
**Impementation Time:** [How long this might take to implement]

1. [First concrete step]
2. [Second step]
   - [Sub-step detail]
   - [Sub-step detail]
3. [Third step]

**Learning Outcome:** [What we expect to learn from this milestone]
```

#### 2. Sequence Milestones Properly

- Start with core functionality in minimal form
- Add complexity gradually in subsequent milestones
- Place optional features later in the sequence
- End with integration and performance optimizations

#### 3. Include Learning Outcomes

Every milestone should explicitly state what you expect to learn, such as:

- Technical feasibility of an approach
- Performance characteristics
- User experience insights
- Integration challenges

### Anti-Patterns to Avoid

❌ **Layer-Based Planning** - Avoid organizing by technical layers (data, logic, UI)  
❌ **All-or-Nothing Milestones** - Avoid milestones that don't produce testable results  
❌ **Front-Loading Complexity** - Avoid tackling the hardest problems first  
❌ **Fixed Specifications** - Avoid overly detailed specifications that don't allow for learning

### Example Implementation Plan Structure

```markdown
# Feature X Implementation Plan

## Milestone 1: Basic Functionality

...

## Milestone 2: Core Use Case Support

...

## Milestone 3: Error Handling & Edge Cases

...

## Milestone 4: Configuration & Customization

...

## Milestone 5: Performance Optimization

...
```

### Process for Each Milestone

1. **Prototype** - Get a basic version working quickly
2. **Test** - Create examples with real data
3. **Learn** - Evaluate what works and what doesn't
4. **Refine** - Improve based on learnings
5. **Document** - Update documentation with insights before moving on

By following these guidelines, we'll create implementation plans that support learning, adaptation, and incremental value delivery.
